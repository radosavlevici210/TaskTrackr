import { useState } from "react";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { isUnauthorizedError } from "@/lib/authUtils";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, X } from "lucide-react";

const createSongSchema = z.object({
  title: z.string().min(1, "Title is required"),
  lyrics: z.string().min(10, "Lyrics must be at least 10 characters"),
  genre: z.string().min(1, "Genre is required"),
  mood: z.string().optional(),
  tempo: z.string().optional(),
  aiArtistId: z.number().min(1, "AI Artist is required"),
});

type CreateSongForm = z.infer<typeof createSongSchema>;

interface CreateSongModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function CreateSongModal({ open, onOpenChange }: CreateSongModalProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [estimatedDuration, setEstimatedDuration] = useState("3:30");
  const [wordCount, setWordCount] = useState(0);
  const [lineCount, setLineCount] = useState(0);

  const { data: aiArtists } = useQuery({
    queryKey: ["/api/ai-artists"],
  });

  const form = useForm<CreateSongForm>({
    resolver: zodResolver(createSongSchema),
    defaultValues: {
      title: "",
      lyrics: "",
      genre: "",
      mood: "",
      tempo: "",
      aiArtistId: 0,
    },
  });

  const createProjectMutation = useMutation({
    mutationFn: async (data: CreateSongForm) => {
      const response = await apiRequest("POST", "/api/projects", data);
      return response.json();
    },
    onSuccess: (project) => {
      queryClient.invalidateQueries({ queryKey: ["/api/projects"] });
      queryClient.invalidateQueries({ queryKey: ["/api/user/stats"] });
      
      toast({
        title: "Song Creation Started",
        description: `${project.title} is now being generated by our AI.`,
      });
      
      onOpenChange(false);
      form.reset();
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      
      toast({
        title: "Error",
        description: "Failed to create song. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleLyricsChange = (lyrics: string) => {
    const words = lyrics.trim() ? lyrics.trim().split(/\s+/).length : 0;
    const lines = lyrics.trim() ? lyrics.trim().split('\n').length : 0;
    
    setWordCount(words);
    setLineCount(lines);
    
    // Estimate duration based on typical song structure (roughly 4-5 words per second)
    const estimatedSeconds = Math.max(180, Math.min(300, words * 0.8));
    const mins = Math.floor(estimatedSeconds / 60);
    const secs = Math.floor(estimatedSeconds % 60);
    setEstimatedDuration(`${mins}:${secs.toString().padStart(2, '0')}`);
  };

  const onSubmit = (data: CreateSongForm) => {
    createProjectMutation.mutate(data);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl bg-dark-900 border-dark-800">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-white">Create New Song</DialogTitle>
          <Button
            variant="ghost"
            size="icon"
            className="absolute right-4 top-4"
            onClick={() => onOpenChange(false)}
          >
            <X className="h-4 w-4" />
          </Button>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-white">Song Title</FormLabel>
                  <FormControl>
                    <input
                      {...field}
                      placeholder="Enter song title..."
                      className="w-full p-3 bg-dark-800 border border-dark-700 rounded-lg text-white placeholder-dark-400 focus:border-primary focus:ring-1 focus:ring-primary"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="lyrics"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-white">Song Lyrics</FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      placeholder="Enter your lyrics here..."
                      className="h-48 resize-none bg-dark-800 border-dark-700 text-white placeholder-dark-400 focus:border-primary"
                      onChange={(e) => {
                        field.onChange(e);
                        handleLyricsChange(e.target.value);
                      }}
                    />
                  </FormControl>
                  <div className="flex justify-between items-center text-xs text-dark-400">
                    <span>Estimated duration: {estimatedDuration}</span>
                    <span>Words: {wordCount} | Lines: {lineCount}</span>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="genre"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-white">Genre</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-dark-800 border-dark-700 text-white">
                          <SelectValue placeholder="Select genre" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-dark-800 border-dark-700">
                        <SelectItem value="pop">Pop</SelectItem>
                        <SelectItem value="hip-hop">Hip-Hop</SelectItem>
                        <SelectItem value="r&b">R&B</SelectItem>
                        <SelectItem value="rock">Rock</SelectItem>
                        <SelectItem value="electronic">Electronic</SelectItem>
                        <SelectItem value="country">Country</SelectItem>
                        <SelectItem value="jazz">Jazz</SelectItem>
                        <SelectItem value="reggae">Reggae</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="aiArtistId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-white">AI Artist</FormLabel>
                    <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value?.toString()}>
                      <FormControl>
                        <SelectTrigger className="bg-dark-800 border-dark-700 text-white">
                          <SelectValue placeholder="Select AI artist" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-dark-800 border-dark-700">
                        {aiArtists?.map((artist) => (
                          <SelectItem key={artist.id} value={artist.id.toString()}>
                            {artist.name} ({artist.voiceType}, {artist.genre})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="mood"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-white">Mood (Optional)</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-dark-800 border-dark-700 text-white">
                          <SelectValue placeholder="Select mood" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-dark-800 border-dark-700">
                        <SelectItem value="happy">Happy</SelectItem>
                        <SelectItem value="sad">Sad</SelectItem>
                        <SelectItem value="energetic">Energetic</SelectItem>
                        <SelectItem value="romantic">Romantic</SelectItem>
                        <SelectItem value="aggressive">Aggressive</SelectItem>
                        <SelectItem value="calm">Calm</SelectItem>
                        <SelectItem value="mysterious">Mysterious</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="tempo"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-white">Tempo (Optional)</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-dark-800 border-dark-700 text-white">
                          <SelectValue placeholder="Select tempo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-dark-800 border-dark-700">
                        <SelectItem value="slow">Slow (60-80 BPM)</SelectItem>
                        <SelectItem value="moderate">Moderate (80-120 BPM)</SelectItem>
                        <SelectItem value="fast">Fast (120-140 BPM)</SelectItem>
                        <SelectItem value="very-fast">Very Fast (140+ BPM)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="flex items-center justify-end gap-4 pt-4 border-t border-dark-800">
              <Button
                type="button"
                variant="ghost"
                onClick={() => onOpenChange(false)}
                disabled={createProjectMutation.isPending}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={createProjectMutation.isPending}
                className="bg-primary hover:bg-primary/90"
              >
                {createProjectMutation.isPending ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    Generate Song
                  </>
                )}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
